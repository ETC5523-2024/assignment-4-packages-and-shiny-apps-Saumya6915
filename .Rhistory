#| echo: false
# Set up chunk for all slides
knitr::opts_chunk$set(
fig.width = 6,
fig.height = 4,
fig.align = "center",
out.width = "100%",
code.line.numbers = FALSE,
fig.retina = 4,
echo = TRUE,
message = FALSE,
warning = FALSE,
cache = FALSE,
dev.args = list(pointsize = 11)
)
#| echo: false
# Load libraries
library(tidyverse)
library(readxl)
library(visdat)
library(naniar)
library(imputeTS)
library(rvest)
library(conflicted)
library(weatherOz)
usethis::use_data_raw()
library(readxl)
library(tidyverse)
library(dplyr)
readxl(Houses-by-suburb-2013-2023.xlsx)
readxl("Houses-by-suburb-2013-2023.xlsx")
library(readxl)
library(tidyverse)
library(dplyr)
library(readxl)
readxl("Houses-by-suburb-2013-2023.xlsx")
dataset <- read_excel("Houses-by-suburb-2013-2023.xlsx")
dataset <- read_excel("Houses-by-suburb-2013-2023.xlsx")
dataset <- read_excel("data_raw/Houses-by-suburb-2013-2023.xlsx")
dataset <- read_excel("data_raw/Houses-by-suburb-2013-2023.xlsx")
library(readxl)
dataset <- read_excel("Houses-by-suburb-2013-2023.xlsx")
use_gpl3_license()
usethis::use_gpl3_license()
usethis::use_vignette()
usethis::use_vignette(property-vignette)
usethis::use_vignette("property-vignette")
devtools::check()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tidyverse)
library(readr)
library(knitr)
library(readxl)
property_data <- read_excel("data-raw/Houses-by-suburb-2013-2023.xlsx")
property_data <- read_excel("data-raw/Houses-by-suburb-2013-2023.xlsx")
usethis::use_data(property_data_wide, overwrite = TRUE)
usethis::use_data(property_data_wide, overwrite = TRUE)
library(readxl)
library(tidyverse)
library(dplyr)
library(tidyr)
property_data_wide <- read_excel("Houses-by-suburb-2013-2023.xlsx")
library(readxl)
library(tidyverse)
library(dplyr)
library(tidyr)
property_data_wide <- read_excel("Houses-by-suburb-2013-2023.xlsx")
property_data_wide <- read_excel("Houses-by-suburb-2013-2023.xlsx")
property_data_wide <- read_excel("data-raw/Houses-by-suburb-2013-2023.xlsx")
property_data_wide$`2013` <- as.numeric(property_data$`2013`)
usethis::use_data(property_data_wide, overwrite = TRUE)
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::check()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(MelbournePrices)
library(readr)
library(knitr)
library(readxl)
data("property_data", package = "MelbournePrices")
#| label: tbl-data-dictionary
library(knitr)
library(kableExtra)
data_desc <- data.frame(
Variable_Name = c("Locality", "Prelim", "22-23", "13-23", "PA", "year", "median_price"),
Description = c(
"The name of the suburb or locality in Melbourne.",
"Preliminary house price estimate for the latest year.",
"Percentage change in median house price from 2022 to 2023.",
"Percentage growth in house prices from 2013 to 2023.",
"Compound annual growth rate (CAGR) or price appreciation (PA) percentage.",
"The year associated with the median price.",
"The median house price in AUD for the specified locality and year."
)
)
# Print the data dictionary table
kable(data_desc, caption = "Variables in the dataset") %>%
kable_styling()
annual_growth <- annual_price_growth(property_data, "ABBOTSFORD")
head(annual_growth)
# Identify top 10 suburbs with the highest growth from 2013 to 2023
top_suburbs <- top_performing_suburbs(property_data, 2013, 2023, top_n = 10)
top_suburbs
volatility <- price_volatility(property_data, "ABBOTSFORD")
volatility
annual_trends <- market_trends_by_year(property_data)
head(annual_trends)
devtools::check()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
data("property_data", package = "MelbournePrices")
#| label: tbl-data-dictionary
library(knitr)
library(kableExtra)
data_desc <- data.frame(
Variable_Name = c("Locality", "Prelim", "22-23", "13-23", "PA", "year", "median_price"),
Description = c(
"The name of the suburb or locality in Melbourne.",
"Preliminary house price estimate for the latest year.",
"Percentage change in median house price from 2022 to 2023.",
"Percentage growth in house prices from 2013 to 2023.",
"Compound annual growth rate (CAGR) or price appreciation (PA) percentage.",
"The year associated with the median price.",
"The median house price in AUD for the specified locality and year."
)
)
# Print the data dictionary table
kable(data_desc, caption = "Variables in the dataset") %>%
kable_styling()
annual_growth <- annual_price_growth(property_data, "ABBOTSFORD")
head(annual_growth)
# Identify top 10 suburbs with the highest growth from 2013 to 2023
top_suburbs <- top_performing_suburbs(property_data, 2013, 2023, top_n = 10)
top_suburbs
volatility <- price_volatility(property_data, "ABBOTSFORD")
volatility
annual_trends <- market_trends_by_year(property_data)
head(annual_trends)
devtools::check()
annual_growth <- annual_price_growth(property_data, "ABBOTSFORD")
head(annual_growth)
#'
#' This function calculates the annual growth rate of the median property price for a specified locality.
#'
#' @param property_data Data frame containing property data with columns 'Locality', 'year', and 'median_price'.
#' @param locality Character string specifying the name of the locality for which to calculate annual growth.
#'
#' @return A data frame with columns 'year', 'median_price', and 'annual_growth_rate' representing the annual price growth rate.
#' @examples
#' annual_price_growth(property_data, "ABBOTSFORD")
#' @export
annual_price_growth <- function(property_data, locality) {
print("property_data type:")
print(class(property_data))
print("property_data columns:")
print(names(property_data))
# Filter data for the selected locality
subset <- property_data[property_data$Locality == locality, ]
print("Subset after filtering by locality:")
print(head(subset))  # Check the first few rows to ensure filtering works
# Sort by year and calculate annual growth rate
subset <- subset[order(subset$year), ]
subset$annual_growth_rate <- c(NA, diff(subset$median_price) / head(subset$median_price, -1) * 100)
# Return the result with selected columns
return(subset[, c("year", "median_price", "annual_growth_rate")])
}
@export
Top-Performing Suburbs Based on Average Annual Growth
@export
#'
#' @param property_data Data frame containing property data with columns 'Locality', 'year', and 'median_price'.
#' @param start_year Numeric value indicating the start year of the analysis period.
#' @param end_year Numeric value indicating the end year of the analysis period.
#' @param top_n Numeric value specifying the number of top-performing suburbs to return. Default is 5.
#'
#' @return A data frame with columns 'Locality' and 'avg_annual_growth_rate', showing the top `top_n` suburbs.
#' @examples
#' @export
#' top_performing_suburbs(property_data, 2013, 2023, top_n = 10)
top_performing_suburbs <- function(property_data, start_year, end_year, top_n = 5) {
period_data <- subset(property_data, year >= start_year & year <= end_year)
growth_data <- aggregate(median_price ~ Locality, data = period_data, function(x) mean(diff(log(x))) * 100)
colnames(growth_data)[2] <- "avg_annual_growth_rate"
return(head(growth_data[order(-growth_data$avg_annual_growth_rate), ], top_n))
}
#' Calculate Price Volatility for a Locality
#'
#' Measures the volatility of property prices over the available period for a specified locality.
#'
#' @param property_data Data frame containing property data with columns 'Locality' and 'median_price'.
#' @param locality Character string specifying the name of the locality for which to measure volatility.
#'
#' @return A list with 'Locality' and 'Price Volatility', representing the standard deviation of prices for the locality.
#' @examples
#' price_volatility(property_data, "ABBOTSFORD")
#' @export
price_volatility <- function(property_data, Locality) {
subset <- property_data[property_data$Locality == Locality, ]
volatility <- sd(subset$median_price, na.rm = TRUE)
return(list(Locality = Locality, Price_Volatility = volatility))
}
#' Summarize Market Trends by Year
#'
#' Aggregates annual statistics, such as average median price, average growth rate, and the number of localities tracked, by year.
#'
#' @param data Data frame containing property data with columns 'year', 'median_price', and 'Locality'.
#'
#' @return A data frame with columns 'year', 'avg_median_price', 'avg_growth_rate', and 'locality_count', summarizing trends per year.
#' @examples
#' market_trends_by_year(property_data)
#' @export
market_trends_by_year <- function(data) {
# Define a helper function to calculate the average growth rate
avg_growth <- function(x) mean(diff(log(x)), na.rm = TRUE) * 100
# Calculate the average median price per year
avg_price_summary <- aggregate(median_price ~ year, data = data, mean)
colnames(avg_price_summary)[2] <- "avg_median_price"
# Calculate the average growth rate per year
avg_growth_summary <- aggregate(median_price ~ year, data = data, avg_growth)
colnames(avg_growth_summary)[2] <- "avg_growth_rate"
# Calculate the count of unique localities per year
locality_count_summary <- aggregate(Locality ~ year, data = data, function(x) length(unique(x)))
colnames(locality_count_summary)[2] <- "locality_count"
# Merge the summaries by year to create a single data frame
summary <- merge(avg_price_summary, avg_growth_summary, by = "year")
summary <- merge(summary, locality_count_summary, by = "year")
return(summary)
}
devtools::document()
`rm(list = c("annual_price_growth", "market_trends_by_year", "price_volatility",
"top_performing_suburbs"))
rm(list = c("annual_price_growth", "market_trends_by_year", "price_volatility",
"top_performing_suburbs"))
devtools::document()
devtools::document()
@export
devtools::document()
devtools::check()
devtools::document()
library(shiny); runApp('inst/shiny-app.R')
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
data("property_data", package = "MelbournePrices")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
data("property_data", package = "MelbournePrices")
library(MelbournePrices)
library(tidyverse)
library(readr)
library(knitr)
library(readxl)
data("property_data", package = "MelbournePrices")
devtools::install()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(MelbournePrices)
library(tidyverse)
library(readr)
library(knitr)
library(readxl)
data("property_data", package = "MelbournePrices")
#| label: tbl-data-dictionary
library(knitr)
library(kableExtra)
data_desc <- data.frame(
Variable_Name = c("Locality", "Prelim", "22-23", "13-23", "PA", "year", "median_price"),
Description = c(
"The name of the suburb or locality in Melbourne.",
"Preliminary house price estimate for the latest year.",
"Percentage change in median house price from 2022 to 2023.",
"Percentage growth in house prices from 2013 to 2023.",
"Compound annual growth rate (CAGR) or price appreciation (PA) percentage.",
"The year associated with the median price.",
"The median house price in AUD for the specified locality and year."
)
)
# Print the data dictionary table
kable(data_desc, caption = "Variables in the dataset") %>%
kable_styling()
annual_growth <- annual_price_growth(property_data, "ABBOTSFORD")
View(data_desc)
library(MelbournePrices)
data("property_data", package = "MelbournePrices")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
If you encounter a clear bug or have questions about using this package,
```{r}
#' Launch the Shiny App from the inst Folder
#'
#' This function launches a Shiny application located in the inst folder of the package.
#' @param launch.browser Logical; if TRUE, opens the app in the default web browser.
#'
#' @return No return value; the function is called for its side effect of launching the app.
#' @examples
#' launch_shiny_app()
#' @export
launch_shiny_app <- function(launch.browser = TRUE) {
app_directory <- system.file("shiny-app.R", package = "MelbournePrices")
# Check if the app file exists
if (!file.exists(app_directory)) {
stop("The Shiny app file does not exist in the inst folder.")
}
# Launch the Shiny app
shiny::runApp(app_directory, launch.browser = launch.browser)
}
