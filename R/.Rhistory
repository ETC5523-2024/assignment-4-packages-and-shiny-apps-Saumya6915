#' Calculate Annual Price Growth for a Locality
#'
#' This function calculates the annual growth rate of the median property price for a specified locality.
#'
#' @param property_data Data frame containing property data with columns 'Locality', 'year', and 'median_price'.
#' @param locality Character string specifying the name of the locality for which to calculate annual growth.
#'
#' @return A data frame with columns 'year', 'median_price', and 'annual_growth_rate' representing the annual price growth rate.
#' @examples
#' annual_price_growth(property_data, "ABBOTSFORD")
annual_price_growth <- function(property_data, locality) {
print("property_data type:")
print(class(property_data))
print("property_data columns:")
print(names(property_data))
# Filter data for the selected locality
subset <- property_data[property_data$Locality == locality, ]
print("Subset after filtering by locality:")
print(head(subset))  # Check the first few rows to ensure filtering works
# Sort by year and calculate annual growth rate
subset <- subset[order(subset$year), ]
subset$annual_growth_rate <- c(NA, diff(subset$median_price) / head(subset$median_price, -1) * 100)
# Return the result with selected columns
return(subset[, c("year", "median_price", "annual_growth_rate")])
}
View(annual_price_growth)
annual_price_growth <- function(property_data, locality) {
print("property_data type:")
print(class(property_data))
print("property_data columns:")
print(names(property_data))
annual_price_growth <- function(property_data, locality) {
print("property_data type:")
print(class(property_data))
print("property_data columns:")
print(names(property_data))
#' Identifies the top-performing suburbs with the highest average annual growth rate over a specified period.
#'
#' @param property_data Data frame containing property data with columns 'Locality', 'year', and 'median_price'.
#' @param start_year Numeric value indicating the start year of the analysis period.
#' @param end_year Numeric value indicating the end year of the analysis period.
#' @param top_n Numeric value specifying the number of top-performing suburbs to return. Default is 5.
#'
#' @return A data frame with columns 'Locality' and 'avg_annual_growth_rate', showing the top `top_n` suburbs.
#' @examples
#' top_performing_suburbs(property_data, 2013, 2023, top_n = 10)
top_performing_suburbs <- function(property_data, start_year, end_year, top_n = 5) {
period_data <- subset(property_data, year >= start_year & year <= end_year)
growth_data <- aggregate(median_price ~ Locality, data = period_data, function(x) mean(diff(log(x))) * 100)
colnames(growth_data)[2] <- "avg_annual_growth_rate"
return(head(growth_data[order(-growth_data$avg_annual_growth_rate), ], top_n))
}
#' Top-Performing Suburbs Based on Average Annual Growth
#'
#' Identifies the top-performing suburbs with the highest average annual growth rate over a specified period.
#'
#' @param property_data Data frame containing property data with columns 'Locality', 'year', and 'median_price'.
#' @param start_year Numeric value indicating the start year of the analysis period.
#' @param end_year Numeric value indicating the end year of the analysis period.
#' @param top_n Numeric value specifying the number of top-performing suburbs to return. Default is 5.
#'
#' @return A data frame with columns 'Locality' and 'avg_annual_growth_rate', showing the top `top_n` suburbs.
#' @examples
#' top_performing_suburbs(property_data, 2013, 2023, top_n = 10)
top_performing_suburbs <- function(property_data, start_year, end_year, top_n = 5) {
period_data <- subset(property_data, year >= start_year & year <= end_year)
growth_data <- aggregate(median_price ~ Locality, data = period_data, function(x) mean(diff(log(x))) * 100)
colnames(growth_data)[2] <- "avg_annual_growth_rate"
return(head(growth_data[order(-growth_data$avg_annual_growth_rate), ], top_n))
}
#' Calculate Price Volatility for a Locality
#'
#' Measures the volatility of property prices over the available period for a specified locality.
#'
#' @param property_data Data frame containing property data with columns 'Locality' and 'median_price'.
#' @param locality Character string specifying the name of the locality for which to measure volatility.
#'
#' @return A list with 'Locality' and 'Price Volatility', representing the standard deviation of prices for the locality.
#' @examples
#' price_volatility(property_data, "ABBOTSFORD")
price_volatility <- function(property_data, Locality) {
subset <- property_data[property_data$Locality == Locality, ]
volatility <- sd(subset$median_price, na.rm = TRUE)
return(list(Locality = Locality, Price_Volatility = volatility))
## code to prepare `DATASET` dataset goes here
library(readxl)
library(tidyverse)
library(dplyr)
library(tidyr)
property_data_wide <- read_excel("data-raw/Houses-by-suburb-2013-2023.xlsx")
### Cleaning of the data
property_data_wide$`2013` <- as.numeric(property_data$`2013`)
property_data_wide$`2014` <- as.numeric(property_data$`2014`)
property_data_wide$`2015` <- as.numeric(property_data$`2015`)
property_data_wide$`2016` <- as.numeric(property_data$`2016`)
property_data_wide$`2017` <- as.numeric(property_data$`2017`)
property_data_wide$`2018` <- as.numeric(property_data$`2018`)
property_data_wide$`2019` <- as.numeric(property_data$`2019`)
property_data_wide$`Prelim` <- as.numeric(property_data$`Prelim`)
property_data_wide$`13-23` <- as.numeric(property_data$`13-23`)
property_data_wide$`PA` <- as.numeric(property_data$`PA`)
property_data <- property_data_wide %>%
pivot_longer(
cols = starts_with("20"),  # Select columns for each year
names_to = "year",           # Create a new 'year' column
values_to = "median_price"    # Rename values column
) %>%
mutate(year = as.integer(year))
glimpse(property_data)
usethis::use_data(property_data, overwrite = TRUE)
load("C:/Users/aalch/OneDrive/Desktop/Communicating with data/assignment-4-packages-and-shiny-apps-Saumya6915/data/property_data.rda")
load("C:/Users/aalch/OneDrive/Desktop/Communicating with data/assignment-4-packages-and-shiny-apps-Saumya6915/data/property_data.rda")
