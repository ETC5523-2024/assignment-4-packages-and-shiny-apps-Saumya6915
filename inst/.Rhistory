library(shiny); runApp('shiny-app.R')
runApp('shiny-app.R')
runApp('shiny-app.R')
runApp('shiny-app.R')
library(MelbournePrices)
library(shiny)
library(ggplot2)
library(dplyr)
library(shinydashboard)
library(MelbournePrices)
# Load property data from your package
data("property_data", package = "MelbournePrices")  # Replace with your actual package name
# Define UI
ui <- dashboardPage(
dashboardHeader(title = HTML("<b>Melbourne Property Insights</b>")),  # Updated title with bold styling
dashboardSidebar(
sidebarMenu(
menuItem("Annual Price Growth", tabName = "growth", icon = icon("chart-line")),
menuItem("Top-Performing Suburbs", tabName = "top_suburbs", icon = icon("fire")),
menuItem("Price Volatility", tabName = "volatility", icon = icon("bolt")),
menuItem("Market Trends Summary", tabName = "trends", icon = icon("table"))
)
),
dashboardBody(
tags$head(tags$style(HTML('
/* Header and Sidebar Customization */
.skin-blue .main-header .logo {
background-color: #2a3f54;
color: white;
font-weight: bold;
}
.skin-blue .main-sidebar {
background-color: #2a3f54;
}
.skin-blue .main-header .navbar {
background-color: #2a3f54;
}
/* Content Panel Customization */
.content-wrapper, .right-side {
background-color: #f3f6fa;
}
'))),
tabItems(
# Annual Price Growth Tab
tabItem(tabName = "growth",
h2("Annual Price Growth for a Locality"),
selectInput("locality_growth", "Choose a Locality:", choices = unique(property_data$Locality)),
plotOutput("growthPlot"),
tableOutput("growthTable"),
br(),
p("This plot shows the year-over-year growth rate of property prices for the selected locality, helping users understand price appreciation or depreciation trends over time.")
),
# Top-Performing Suburbs Tab
tabItem(tabName = "top_suburbs",
h2("Top-Performing Suburbs by Average Annual Growth"),
numericInput("start_year", "Start Year:", min = min(property_data$year), max = max(property_data$year), value = 2013),
numericInput("end_year", "End Year:", min = min(property_data$year), max = max(property_data$year), value = 2023),
numericInput("top_n", "Number of Top Suburbs:", value = 5, min = 1),
actionButton("generate", "Generate Output"),  # Action button to trigger output
tableOutput("topSuburbsTable"),
br(),
p("This table lists the top-performing suburbs based on average annual growth rate, calculated over the selected time period.")
),
# Price Volatility Tab
tabItem(tabName = "volatility",
h2("Price Volatility for a Locality"),
selectInput("locality_volatility", "Choose a Locality:", choices = unique(property_data$Locality)),
verbatimTextOutput("volatilityOutput"),
br(),
p("The price volatility is calculated as the standard deviation of property prices over time for the selected locality. High volatility may indicate fluctuating demand, while low volatility suggests stability.")
),
# Market Trends Summary Tab
tabItem(tabName = "trends",
h2("Market Trends Summary"),
sliderInput("year_range", "Select Year Range:",
min = min(property_data$year), max = max(property_data$year),
value = c(min(property_data$year), max(property_data$year)),
sep = "", step = 1),  # Set step to 1 for whole numbers
plotOutput("trendsPlot"),
tableOutput("trendsTable"),
br(),
p("This summary provides yearly statistics including average median price, average growth rate, and locality count, showing the overall trends in Melbourneâ€™s property market over the selected years.")
)
)
)
)
server <- function(input, output, session) {
# Annual Price Growth for a Locality
growth_data <- reactive({
annual_price_growth(property_data, input$locality_growth)
})
output$growthPlot <- renderPlot({
ggplot(growth_data(), aes(x = year, y = annual_growth_rate)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "blue") +
labs(title = paste("Annual Growth Rate for", input$locality_growth),
x = "Year", y = "Growth Rate (%)") +
theme_minimal()
})
output$growthTable <- renderTable({
growth_data() %>%
select(year, median_price, annual_growth_rate) %>%
rename(Year = year, `Median Price (AUD)` = median_price, `Annual Growth Rate (%)` = annual_growth_rate)
})
# Top-Performing Suburbs by Average Annual Growth
top_suburbs <- eventReactive(input$generate, {
start_year <- as.numeric(input$start_year)
end_year <- as.numeric(input$end_year)
top_n <- as.numeric(input$top_n)
# Handle invalid inputs
if (is.na(start_year) || is.na(end_year) || is.na(top_n)) {
return(data.frame(Error = "Please enter valid numeric values."))
}
# Calculate top-performing suburbs
top_performing_suburbs(property_data, start_year, end_year, top_n)
})
output$topSuburbsTable <- renderTable({
data <- top_suburbs()
if (nrow(data) == 0) {
return(data.frame(Message = "No data available for the selected period."))
}
data
})
# Price Volatility for a Locality
volatility <- reactive({
price_volatility(property_data, input$locality_volatility)
})
output$volatilityOutput <- renderPrint({
volatility()
})
# Market Trends Summary with Year Range Filter
trends_data <- reactive({
full_trends_data <- market_trends_by_year(property_data)
full_trends_data %>%
filter(year >= input$year_range[1], year <= input$year_range[2])
})
output$trendsPlot <- renderPlot({
ggplot(trends_data(), aes(x = year)) +
geom_line(aes(y = avg_median_price), color = "darkgreen", size = 1) +
geom_line(aes(y = avg_growth_rate * 10000), color = "blue", size = 1, linetype = "dashed") +  # Scaled for visualization
labs(title = "Market Trends by Year",
x = "Year", y = "Avg Median Price (AUD)",
caption = "Note: Growth rate scaled for visualization") +
scale_y_continuous(sec.axis = sec_axis(~./10000, name = "Avg Growth Rate (%)")) +
theme_minimal()
})
output$trendsTable <- renderTable({
trends_data() %>%
select(year, avg_median_price, avg_growth_rate, locality_count) %>%
rename(Year = year, `Average Median Price (AUD)` = avg_median_price,
`Average Growth Rate (%)` = avg_growth_rate, `Locality Count` = locality_count)
})
}
# Run the application
shinyApp(ui = ui, server = server)
#' Calculate Annual Price Growth for a Locality
#'
#' This function calculates the annual growth rate of the median property price for a specified locality.
#'
#' @param property_data Data frame containing property data with columns 'Locality', 'year', and 'median_price'.
#' @param locality Character string specifying the name of the locality for which to calculate annual growth.
#'
#' @return A data frame with columns 'year', 'median_price', and 'annual_growth_rate' representing the annual price growth rate.
#' @examples
#' annual_price_growth(property_data, "ABBOTSFORD")
annual_price_growth <- function(property_data, locality) {
print("property_data type:")
print(class(property_data))
print("property_data columns:")
print(names(property_data))
# Filter data for the selected locality
subset <- property_data[property_data$Locality == locality, ]
print("Subset after filtering by locality:")
print(head(subset))  # Check the first few rows to ensure filtering works
# Sort by year and calculate annual growth rate
subset <- subset[order(subset$year), ]
subset$annual_growth_rate <- c(NA, diff(subset$median_price) / head(subset$median_price, -1) * 100)
# Return the result with selected columns
return(subset[, c("year", "median_price", "annual_growth_rate")])
}
#' Identifies the top-performing suburbs with the highest average annual growth rate over a specified period.
#'
#' @param property_data Data frame containing property data with columns 'Locality', 'year', and 'median_price'.
#' @param start_year Numeric value indicating the start year of the analysis period.
#' @param end_year Numeric value indicating the end year of the analysis period.
#' @param top_n Numeric value specifying the number of top-performing suburbs to return. Default is 5.
#'
#' @return A data frame with columns 'Locality' and 'avg_annual_growth_rate', showing the top `top_n` suburbs.
#' @examples
#' top_performing_suburbs(property_data, 2013, 2023, top_n = 10)
top_performing_suburbs <- function(property_data, start_year, end_year, top_n = 5) {
period_data <- subset(property_data, year >= start_year & year <= end_year)
growth_data <- aggregate(median_price ~ Locality, data = period_data, function(x) mean(diff(log(x))) * 100)
colnames(growth_data)[2] <- "avg_annual_growth_rate"
return(head(growth_data[order(-growth_data$avg_annual_growth_rate), ], top_n))
}
price_volatility <- function(property_data, Locality) {
subset <- property_data[property_data$Locality == Locality, ]
volatility <- sd(subset$median_price, na.rm = TRUE)
return(list(Locality = Locality, Price_Volatility = volatility))
}
market_trends_by_year <- function(data) {
# Define a helper function to calculate the average growth rate
avg_growth <- function(x) mean(diff(log(x)), na.rm = TRUE) * 100
# Calculate the average median price per year
avg_price_summary <- aggregate(median_price ~ year, data = data, mean)
colnames(avg_price_summary)[2] <- "avg_median_price"
# Calculate the average growth rate per year
avg_growth_summary <- aggregate(median_price ~ year, data = data, avg_growth)
colnames(avg_growth_summary)[2] <- "avg_growth_rate"
# Calculate the count of unique localities per year
locality_count_summary <- aggregate(Locality ~ year, data = data, function(x) length(unique(x)))
colnames(locality_count_summary)[2] <- "locality_count"
# Merge the summaries by year to create a single data frame
summary <- merge(avg_price_summary, avg_growth_summary, by = "year")
summary <- merge(summary, locality_count_summary, by = "year")
return(summary)
}
runApp('shiny-app.R')
price_volatility <- function(property_data, Locality) {
subset <- property_data[property_data$Locality == Locality, ]
volatility <- sd(subset$median_price, na.rm = TRUE)
return(list(Locality = Locality, Price_Volatility = volatility))
}
#' Calculate Annual Price Growth for a Locality
#'
#' This function calculates the annual growth rate of the median property price for a specified locality.
#'
#' @param property_data Data frame containing property data with columns 'Locality', 'year', and 'median_price'.
#' @param locality Character string specifying the name of the locality for which to calculate annual growth.
#'
#' @return A data frame with columns 'year', 'median_price', and 'annual_growth_rate' representing the annual price growth rate.
#' @examples
#' annual_price_growth(property_data, "ABBOTSFORD")
annual_price_growth <- function(property_data, locality) {
print("property_data type:")
print(class(property_data))
print("property_data columns:")
print(names(property_data))
# Filter data for the selected locality
subset <- property_data[property_data$Locality == locality, ]
print("Subset after filtering by locality:")
print(head(subset))  # Check the first few rows to ensure filtering works
# Sort by year and calculate annual growth rate
subset <- subset[order(subset$year), ]
subset$annual_growth_rate <- c(NA, diff(subset$median_price) / head(subset$median_price, -1) * 100)
# Return the result with selected columns
return(subset[, c("year", "median_price", "annual_growth_rate")])
}
#' Top-Performing Suburbs Based on Average Annual Growth
#'
#' Identifies the top-performing suburbs with the highest average annual growth rate over a specified period.
#'
#' @param property_data Data frame containing property data with columns 'Locality', 'year', and 'median_price'.
#' @param start_year Numeric value indicating the start year of the analysis period.
#' @param end_year Numeric value indicating the end year of the analysis period.
#' @param top_n Numeric value specifying the number of top-performing suburbs to return. Default is 5.
#'
#' @return A data frame with columns 'Locality' and 'avg_annual_growth_rate', showing the top `top_n` suburbs.
#' @examples
#' top_performing_suburbs(property_data, 2013, 2023, top_n = 10)
top_performing_suburbs <- function(property_data, start_year, end_year, top_n = 5) {
period_data <- subset(property_data, year >= start_year & year <= end_year)
growth_data <- aggregate(median_price ~ Locality, data = period_data, function(x) mean(diff(log(x))) * 100)
colnames(growth_data)[2] <- "avg_annual_growth_rate"
return(head(growth_data[order(-growth_data$avg_annual_growth_rate), ], top_n))
}
#' Calculate Price Volatility for a Locality
#'
#' Measures the volatility of property prices over the available period for a specified locality.
#'
#' @param property_data Data frame containing property data with columns 'Locality' and 'median_price'.
#' @param locality Character string specifying the name of the locality for which to measure volatility.
#'
#' @return A list with 'Locality' and 'Price Volatility', representing the standard deviation of prices for the locality.
#' @examples
#' price_volatility(property_data, "ABBOTSFORD")
price_volatility <- function(property_data, Locality) {
subset <- property_data[property_data$Locality == Locality, ]
volatility <- sd(subset$median_price, na.rm = TRUE)
return(list(Locality = Locality, Price_Volatility = volatility))
}
#' Summarize Market Trends by Year
#'
#' Aggregates annual statistics, such as average median price, average growth rate, and the number of localities tracked, by year.
#'
#' @param data Data frame containing property data with columns 'year', 'median_price', and 'Locality'.
#'
#' @return A data frame with columns 'year', 'avg_median_price', 'avg_growth_rate', and 'locality_count', summarizing trends per year.
#' @examples
#' market_trends_by_year(property_data)
market_trends_by_year <- function(data) {
# Define a helper function to calculate the average growth rate
avg_growth <- function(x) mean(diff(log(x)), na.rm = TRUE) * 100
# Calculate the average median price per year
avg_price_summary <- aggregate(median_price ~ year, data = data, mean)
colnames(avg_price_summary)[2] <- "avg_median_price"
# Calculate the average growth rate per year
avg_growth_summary <- aggregate(median_price ~ year, data = data, avg_growth)
colnames(avg_growth_summary)[2] <- "avg_growth_rate"
# Calculate the count of unique localities per year
locality_count_summary <- aggregate(Locality ~ year, data = data, function(x) length(unique(x)))
colnames(locality_count_summary)[2] <- "locality_count"
# Merge the summaries by year to create a single data frame
summary <- merge(avg_price_summary, avg_growth_summary, by = "year")
summary <- merge(summary, locality_count_summary, by = "year")
return(summary)
}
runApp('shiny-app.R')
View(property_data)
annual_price_growth(property_data, "Clayton")
top_performing_suburbs(property_data, 2013, 2023, 5)
View(property_data)
View(property_data)
load("C:/Users/aalch/OneDrive/Desktop/Communicating with data/assignment-4-packages-and-shiny-apps-Saumya6915/data/property_data_wide.rda")
load("C:/Users/aalch/OneDrive/Desktop/Communicating with data/assignment-4-packages-and-shiny-apps-Saumya6915/data/property_data.rda")
annual_price_growth(property_data, "Clayton")
runApp('shiny-app.R')
library(shiny)
library(ggplot2)
library(dplyr)
library(shinydashboard)
library(MelbournePrices)
runApp('shiny-app.R')
#' Calculate Annual Price Growth for a Locality
#'
#' This function calculates the annual growth rate of the median property price for a specified locality.
#'
#' @param property_data Data frame containing property data with columns 'Locality', 'year', and 'median_price'.
#' @param locality Character string specifying the name of the locality for which to calculate annual growth.
#'
#' @return A data frame with columns 'year', 'median_price', and 'annual_growth_rate' representing the annual price growth rate.
#' @examples
#' annual_price_growth(property_data, "ABBOTSFORD")
annual_price_growth <- function(property_data, locality) {
print("property_data type:")
print(class(property_data))
print("property_data columns:")
print(names(property_data))
# Filter data for the selected locality
subset <- property_data[property_data$Locality == locality, ]
print("Subset after filtering by locality:")
print(head(subset))  # Check the first few rows to ensure filtering works
# Sort by year and calculate annual growth rate
subset <- subset[order(subset$year), ]
subset$annual_growth_rate <- c(NA, diff(subset$median_price) / head(subset$median_price, -1) * 100)
# Return the result with selected columns
return(subset[, c("year", "median_price", "annual_growth_rate")])
}
#' Top-Performing Suburbs Based on Average Annual Growth
#'
#' Identifies the top-performing suburbs with the highest average annual growth rate over a specified period.
#'
#' @param property_data Data frame containing property data with columns 'Locality', 'year', and 'median_price'.
#' @param start_year Numeric value indicating the start year of the analysis period.
#' @param end_year Numeric value indicating the end year of the analysis period.
#' @param top_n Numeric value specifying the number of top-performing suburbs to return. Default is 5.
#'
#' @return A data frame with columns 'Locality' and 'avg_annual_growth_rate', showing the top `top_n` suburbs.
#' @examples
#' top_performing_suburbs(property_data, 2013, 2023, top_n = 10)
top_performing_suburbs <- function(property_data, start_year, end_year, top_n = 5) {
period_data <- subset(property_data, year >= start_year & year <= end_year)
growth_data <- aggregate(median_price ~ Locality, data = period_data, function(x) mean(diff(log(x))) * 100)
colnames(growth_data)[2] <- "avg_annual_growth_rate"
return(head(growth_data[order(-growth_data$avg_annual_growth_rate), ], top_n))
}
#' Top-Performing Suburbs Based on Average Annual Growth
#'
#' Identifies the top-performing suburbs with the highest average annual growth rate over a specified period.
#'
#' @param property_data Data frame containing property data with columns 'Locality', 'year', and 'median_price'.
#' @param start_year Numeric value indicating the start year of the analysis period.
#' @param end_year Numeric value indicating the end year of the analysis period.
#' @param top_n Numeric value specifying the number of top-performing suburbs to return. Default is 5.
#'
#' @return A data frame with columns 'Locality' and 'avg_annual_growth_rate', showing the top `top_n` suburbs.
#' @examples
#' top_performing_suburbs(property_data, 2013, 2023, top_n = 10)
top_performing_suburbs <- function(property_data, start_year, end_year, top_n = 5) {
period_data <- subset(property_data, year >= start_year & year <= end_year)
growth_data <- aggregate(median_price ~ Locality, data = period_data, function(x) mean(diff(log(x))) * 100)
colnames(growth_data)[2] <- "avg_annual_growth_rate"
return(head(growth_data[order(-growth_data$avg_annual_growth_rate), ], top_n))
}
#' Calculate Price Volatility for a Locality
#'
#' Measures the volatility of property prices over the available period for a specified locality.
#'
#' @param property_data Data frame containing property data with columns 'Locality' and 'median_price'.
#' @param locality Character string specifying the name of the locality for which to measure volatility.
#'
#' @return A list with 'Locality' and 'Price Volatility', representing the standard deviation of prices for the locality.
#' @examples
#' price_volatility(property_data, "ABBOTSFORD")
price_volatility <- function(property_data, Locality) {
subset <- property_data[property_data$Locality == Locality, ]
volatility <- sd(subset$median_price, na.rm = TRUE)
return(list(Locality = Locality, Price_Volatility = volatility))
}
#' Summarize Market Trends by Year
#'
#' Aggregates annual statistics, such as average median price, average growth rate, and the number of localities tracked, by year.
#'
#' @param data Data frame containing property data with columns 'year', 'median_price', and 'Locality'.
#'
#' @return A data frame with columns 'year', 'avg_median_price', 'avg_growth_rate', and 'locality_count', summarizing trends per year.
#' @examples
#' market_trends_by_year(property_data)
market_trends_by_year <- function(data) {
# Define a helper function to calculate the average growth rate
avg_growth <- function(x) mean(diff(log(x)), na.rm = TRUE) * 100
# Calculate the average median price per year
avg_price_summary <- aggregate(median_price ~ year, data = data, mean)
colnames(avg_price_summary)[2] <- "avg_median_price"
# Calculate the average growth rate per year
avg_growth_summary <- aggregate(median_price ~ year, data = data, avg_growth)
colnames(avg_growth_summary)[2] <- "avg_growth_rate"
# Calculate the count of unique localities per year
locality_count_summary <- aggregate(Locality ~ year, data = data, function(x) length(unique(x)))
colnames(locality_count_summary)[2] <- "locality_count"
# Merge the summaries by year to create a single data frame
summary <- merge(avg_price_summary, avg_growth_summary, by = "year")
summary <- merge(summary, locality_count_summary, by = "year")
return(summary)
}
runApp('shiny-app.R')
